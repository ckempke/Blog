{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my little corner of the Internet! I'll assume you're one of my legions of fans that have come from the Terrain Generation pages: https://ckempke.github.io/UnityTerrainGeneration with questions like \"wait, you have legions of fans?\" and \"how do I actually find what's new on that site, anyway?\" You'll be ecstatic to learn that this is a much more traditional \"Blog\" format, with, like, dated pages and \"most-recent-at-the-top\" and all that cool stuff that was state of the art in the late 90's. The Actual Blog \u00b6 {{ blog_content }} Who Am I? \u00b6 I'm Chris Kempke. Over my 30-year career, I've worked for a few consulting companies, MultiAd Services, HP, Microsoft, and Everbridge. I have a Master's Degree in Computer Science from Oregon State University and a B.A. in Computer Science from Carleton College. (Trivia: I graduated in 1989, and was the first declared Computer Science major at Carleton). Now retired, I've been spending my time writing (both fiction and not), and learning some of those technologies I didn't have time for in my working life. I still have too many hobbies, and occasionally do a little consulting to keep my hand in. A lot of my time these days is spent in Unity (the 3D game engine), mostly trying to make it do things that it doesn't want to do. I tend to write about those, too; I haven't yet made the jump to video like all the \"cool kids\" are doing these days. My blogging software is adapted from a system more intended for documentation; it does not have a \"comments\" section, as you can probably tell by the lack of off-topic badly-written political rants. But if you have comments, you can e-mail them to me at my gmail.com address of \"Christopher.kempke\" and maybe I'll add constructive comments here, manually. My own little rant is that I'm not a fan of most of the large social media apps: I blame their algorithmic, engagement-driven but truth-independent \"filtering\" for a society in which there seems to be no conspiracy or information so obviously, ridiculously, over-the-top-obviously false that about a third of supposedly rational adults won't still somehow believe it. So now that I have no need to integrate with these things for work, I don't. I have no (active, anyway) accounts on Facebook, Twitter, Instagram, TikTok, etc. I do maintain a presence on LinkedIn, primarily because it amuses me how their algorithms don't handle \"Retired\" as a status, and keep recommending to me hundreds of people a \"my company: Retired\" as close network associates. But if you need a temporary, part-time employee for a technical or documentation project, feel free to reach out to me. I might be interested. About this Site \u00b6 A few of you may have stumbled on my previous blog, with one of those hosting services that shall not be named. I'm not entirely sure how they continue to exist, but this one takes forever (minutes sometimes) to process every change, doesn't support Safari (mobile or desktop) with their main theme, and seems more intent on upselling various services than actually providing a web site. Ah, well, water under the bridge. Very expensive water. We're now hosting on GitHub Pages , which is free (for sites within reason), pretty easy for a developer to use (it's the same Git tools we use every day, and the content is just Markdown), and extremely performant. This site uses the MkDocs publishing system, Material theme, and a blogging plugin from https://liang2kl.codes/mkdocs-blogging-plugin/ . Material is supposed to support blogging internally later this year (2022) or early next, so the appearance of the site may change then. I use KaTeX for mathematical markup, and Mermaid-js if I need graphs or flowcharts. Editorial Policy \u00b6 I believe there's some value in a \"paper trail\" of what people say. Information on the web is malleable; I can say today that I hate Honey Nut Cheerios, and tomorrow that exact same article can say I love them. (If it's going to keep you up at night, I'm actually rather ambivalent about them, and on the rare occasions when they're in my house, they're usually generic ones, anyway). There's no accountability in the face of the ability to retroactively edit. So while I'm a fan of \"edit\" buttons\u2014because I mess up spelling and grammar, especially when I type quickly\u2014I generally prefer the ones that have a short time limit before the entered information becomes immutable. However , this isn't meant to be an opinion site. I mean, it is \u2014all blogs are, I suppose\u2014but it's not meant to be a place for public discourse. The opinions here are just mine or those I choose to present. And frankly, opinion pieces on the net, or elsewhere, tend not to change many minds, in my experience. So I intend to use this blog mostly to inform, amuse, or teach. And for those purposes, being able to clean up language, grammar, presentation, outright mistakes, images, etc. over time is invaluable, and tends to make the presented information more valuable, not less. So you'll probably see small edits frequently, and large ones occasionally. Getting things right often involves a step of getting them wrong, first. If I find that something's wrong, I'll change it. And I'm one of those people that fiddles constantly with wording and grammar, can't ever get \"it's\" and \"its\" correct on the first try, and have an evolving, adversarial relationship with bold, italics, code case , and other formatting standards. But if I actually change content in a significant way (correcting something that was originally wrong, or explicitly changing my mind or advice), I'll try to indicate that, along with the reason for the change. Cookies \u00b6 If this site uses cookies, I don't know about them. It's possible the underlying document presentation engine does. In any event, by continuing to use the site: You agree to all cookies, even the ones with raisins in them and even if you don't like raisins. You also agree to send me all your money You agree not to consult a lawyer about whether or not the previous clause is enforceable or not. I don't want your personal information, and if I get any on me, I'll wash it off. However, I think that usage statistics are gathered here by some analytics engine or other. So if you're particularly paranoid about your IP address or something, be aware that someone's probably got it in a log somewhere.","title":"Home"},{"location":"#the-actual-blog","text":"{{ blog_content }}","title":"The Actual Blog"},{"location":"#who-am-i","text":"I'm Chris Kempke. Over my 30-year career, I've worked for a few consulting companies, MultiAd Services, HP, Microsoft, and Everbridge. I have a Master's Degree in Computer Science from Oregon State University and a B.A. in Computer Science from Carleton College. (Trivia: I graduated in 1989, and was the first declared Computer Science major at Carleton). Now retired, I've been spending my time writing (both fiction and not), and learning some of those technologies I didn't have time for in my working life. I still have too many hobbies, and occasionally do a little consulting to keep my hand in. A lot of my time these days is spent in Unity (the 3D game engine), mostly trying to make it do things that it doesn't want to do. I tend to write about those, too; I haven't yet made the jump to video like all the \"cool kids\" are doing these days. My blogging software is adapted from a system more intended for documentation; it does not have a \"comments\" section, as you can probably tell by the lack of off-topic badly-written political rants. But if you have comments, you can e-mail them to me at my gmail.com address of \"Christopher.kempke\" and maybe I'll add constructive comments here, manually. My own little rant is that I'm not a fan of most of the large social media apps: I blame their algorithmic, engagement-driven but truth-independent \"filtering\" for a society in which there seems to be no conspiracy or information so obviously, ridiculously, over-the-top-obviously false that about a third of supposedly rational adults won't still somehow believe it. So now that I have no need to integrate with these things for work, I don't. I have no (active, anyway) accounts on Facebook, Twitter, Instagram, TikTok, etc. I do maintain a presence on LinkedIn, primarily because it amuses me how their algorithms don't handle \"Retired\" as a status, and keep recommending to me hundreds of people a \"my company: Retired\" as close network associates. But if you need a temporary, part-time employee for a technical or documentation project, feel free to reach out to me. I might be interested.","title":"Who Am I?"},{"location":"#about-this-site","text":"A few of you may have stumbled on my previous blog, with one of those hosting services that shall not be named. I'm not entirely sure how they continue to exist, but this one takes forever (minutes sometimes) to process every change, doesn't support Safari (mobile or desktop) with their main theme, and seems more intent on upselling various services than actually providing a web site. Ah, well, water under the bridge. Very expensive water. We're now hosting on GitHub Pages , which is free (for sites within reason), pretty easy for a developer to use (it's the same Git tools we use every day, and the content is just Markdown), and extremely performant. This site uses the MkDocs publishing system, Material theme, and a blogging plugin from https://liang2kl.codes/mkdocs-blogging-plugin/ . Material is supposed to support blogging internally later this year (2022) or early next, so the appearance of the site may change then. I use KaTeX for mathematical markup, and Mermaid-js if I need graphs or flowcharts.","title":"About this Site"},{"location":"#editorial-policy","text":"I believe there's some value in a \"paper trail\" of what people say. Information on the web is malleable; I can say today that I hate Honey Nut Cheerios, and tomorrow that exact same article can say I love them. (If it's going to keep you up at night, I'm actually rather ambivalent about them, and on the rare occasions when they're in my house, they're usually generic ones, anyway). There's no accountability in the face of the ability to retroactively edit. So while I'm a fan of \"edit\" buttons\u2014because I mess up spelling and grammar, especially when I type quickly\u2014I generally prefer the ones that have a short time limit before the entered information becomes immutable. However , this isn't meant to be an opinion site. I mean, it is \u2014all blogs are, I suppose\u2014but it's not meant to be a place for public discourse. The opinions here are just mine or those I choose to present. And frankly, opinion pieces on the net, or elsewhere, tend not to change many minds, in my experience. So I intend to use this blog mostly to inform, amuse, or teach. And for those purposes, being able to clean up language, grammar, presentation, outright mistakes, images, etc. over time is invaluable, and tends to make the presented information more valuable, not less. So you'll probably see small edits frequently, and large ones occasionally. Getting things right often involves a step of getting them wrong, first. If I find that something's wrong, I'll change it. And I'm one of those people that fiddles constantly with wording and grammar, can't ever get \"it's\" and \"its\" correct on the first try, and have an evolving, adversarial relationship with bold, italics, code case , and other formatting standards. But if I actually change content in a significant way (correcting something that was originally wrong, or explicitly changing my mind or advice), I'll try to indicate that, along with the reason for the change.","title":"Editorial Policy"},{"location":"#cookies","text":"If this site uses cookies, I don't know about them. It's possible the underlying document presentation engine does. In any event, by continuing to use the site: You agree to all cookies, even the ones with raisins in them and even if you don't like raisins. You also agree to send me all your money You agree not to consult a lawyer about whether or not the previous clause is enforceable or not. I don't want your personal information, and if I get any on me, I'll wash it off. However, I think that usage statistics are gathered here by some analytics engine or other. So if you're particularly paranoid about your IP address or something, be aware that someone's probably got it in a log somewhere.","title":"Cookies"},{"location":"tags/","text":"Blog Posts by Tag/Topic \u00b6 These are the same blog posts, but indexed by their content tags rather than date. {{ tag_content }}","title":"Posts by Topic"},{"location":"tags/#blog-posts-by-tagtopic","text":"These are the same blog posts, but indexed by their content tags rather than date. {{ tag_content }}","title":"Blog Posts by Tag/Topic"},{"location":"blog/1-AUG-2022/","tags":["mkdocs","blogging","github-pages"],"text":"#mkdocs #blogging #github-pages .md-typeset .blogging-tags-grid { display: flex; flex-direction: row; flex-wrap: wrap; gap: 8px; margin-top: 5px; } .md-typeset .blogging-tag { color: var(--md-typeset-color); background-color: var(--md-typeset-code-color); } .md-typeset .blogging-tag code { border-radius: 5px; } This is just a test page being used while I set up GitHub pages. It'll disappear soon, but if you take screenshots and print them out, you can post them on your refrigerator and keep them forever.","title":"Hello, World!"},{"location":"blog/7-JULY-2021/","tags":["mkdocs","markdown","technology"],"text":"#mkdocs #markdown #technology .md-typeset .blogging-tags-grid { display: flex; flex-direction: row; flex-wrap: wrap; gap: 8px; margin-top: 5px; } .md-typeset .blogging-tag { color: var(--md-typeset-color); background-color: var(--md-typeset-code-color); } .md-typeset .blogging-tag code { border-radius: 5px; } [This blog post has time travelled. It is from a previous blog that predates the very existence of this one.] Being the Internet, I should probably attribute that to either Mark Twain or Abraham Lincoln (and in fact, Google and Bing give dozens of people who supposedly said it), but it's from Andrew Tannenbaum's Computer Networking textbook that I used when I was in college, and seems to be original with him. My \"standard of the day\" is Markdown. If you're not familiar with it, it's basically \"HTML lite\" -- a way of writing documentation by specifying the function, rather than the format, of each textual element, and then it gets magically massaged into something that looks good. It's very lightweight, very broadly supported, and you can learn it in about fifteen minutes (for example, look here: https://www.markdownguide.org/cheat-sheet/). It makes up the baseline documentation format for many blog tools (including this one, although I haven't figured out how to turn it on, yet), GitHub, most modern Wikis, and the internal documentation systems of both Android and Apple. Apple's recent WWDC had a number of sessions on their flavor, called DocC, that's basically the future of formatting for them (even for in-code comments, which is pretty slick, actually). As a baseline documentation language, it serves roughly the same function for technical writers as C does for developers: what you use might not be exactly the same, but you can bet it's heavily influenced by it. But--as with C-like languages--\"flavor\" is the right word. John Gruber invented it in 2004 or so, and the basics haven't changed much. But all it really does is give you formatting of lists in various ways, headings and outlines, paragraphs, internal and external links, and the sort of basic \"emphasis\" technologies like italics and boldface. Which is actually sort of a nice feature: it basically removes the emphasis from formatting back to content . But there's a lot of ways of presenting information, some of which are pretty standard: footnotes, references, tables, various types of \"code\" blocks, and the like. So lots of systems have \"extended\" it in various ways, and not all of those are compatible with each other. So when someone tells you to write in Markdown, \"Which one?\" is not an unreasonable question. Probably the de-facto winner in the Markdown war is \"Github Flavored Markdown,\" (https://github.github.com/gfm/) just because of its centrality to one of the most common developer tools on the web. So if that same someone responds to your question with \"Uh, I don't know?\" GFM is a good baseline assumption. Github also has a backend system called Github Pages that allows you to add structured Markdown files to your Github projects (or just to your Github account), and it will render them using its \"Jekyll\" rendering engine. Looking into technologies for a potential writing project, a former boss of mine pointed me at Docsify (https://docsify.js.org/#/), which is a replacement for Jekyll that does a little more stuff: in particular, it supports custom sidebars/guides, renders the markdown into HTML on demand (rather than requiring a compiling step), and is also supported by Github Pages. Even better, if you fuss with it a little bit, you can use Mermaid (https://mermaid-js.github.io/mermaid/#/) in code blocks, which gives you a near-magical ability to create the various charts (Gantt, Flow, Sequence Diagram, etc.) that make up the technical documenter's nightmares, using a language so simple you can teach it to pretty much anybody who understands what the charts are supposed to represent. I've been playing with this a bit on a GitHub project for terrain generation in the Unity game engine. You can see the documentation as it gets written here: https://ckempke.github.io/UnityTerrainGeneration/#/ [Update, a year later]. Docsify proved to be a little too \"strict\" in its formatting options to allow the flexibility I was looking for, so I currently use MkDocs , which is a more advanced version of the same sort of markdown->HTML site generator. In fact, you're looking at it now, since this blog is rendered with it.","title":"The nice thing about standards is that you have so many to choose from."},{"location":"blog/8-DEC-2021/","tags":["writing","grammar"],"text":"#writing #grammar .md-typeset .blogging-tags-grid { display: flex; flex-direction: row; flex-wrap: wrap; gap: 8px; margin-top: 5px; } .md-typeset .blogging-tag { color: var(--md-typeset-color); background-color: var(--md-typeset-code-color); } .md-typeset .blogging-tag code { border-radius: 5px; } [This blog post has time travelled. It is from a previous blog that predates the very existence of this one.] We often don't pay much attention to the humble apostrophe. It serves its purposes so well that it just sort of blends into the background, unnoticed and unloved. But it lies at the epicenter of an interesting and common cognitive bug. The apostrophe serves several purposes (in English, anyway). First, an apostrophe can indicate elided (left out) letters in contractions. When we lose the \"o\" in \"does not\", it is replaced with an apostrophe: \"doesn't.\" Similarly \"cannot\" becomes \"can't,\" and so on. The utility of this in modern English is debated; some styles prohibit contractions at all in formal writing. After all, \"doesn't\" replaces a mere two characters (the \"o\" and a space) with one (the apostrophe itself), and the savings in other contractions are similarly small. If the goal is saving space, abbreviations, acronyms, and other more powerful linguistic tools are a better choice. There are environments where saving a character or two matters a lot: the canonical example is print newspapers, whose narrow columns are prone to unfortunate line breaks. But for most writing, most of the time, the contraction is a stylistic choice. Where it really shines is conveying dialog; however much we may differ in expressing ourselves in writing, nearly everyone uses contractions in speech. It's difficult not to: the science fiction character Data from Star Trek supposedly cannot (or does not) use contractions, but the writers of the show accidentally included them with some frequency despite this. In writing, both fiction and nonfiction, contractions help convey how people actually speak. Apostrophes help with dialog in other ways: they can convey a sort of inside-a-word pause like glottal stops or syllabic breaks, either when transcribing a word of foreign origin like \"Sahai'a\" or \"Xi'an,\" or for ex-contractions where the original form has vanished from usage entirely, such as \"o'clock.\" Science fiction writers love this for \"alien\" names; there are books where every other character's name is something like \"K'th'q'dp'tl'nt'sr'thik.\" (For real-world speech which uses sounds atypical in other languages--such as that of the San people--all sorts of punctuation may be waylaid and repurposed for transcription.) Probably the most common use of the apostrophe, however, is to show possession. The \"girl's pet,\" the \"shop's inventory,\" the \"dog's bone.\" This use is so common that it's often misused , ala Dave Barry's joke that the use of an apostrophe is to indicate to the reader that an \"s\" is coming up. And the misuses are interesting to me. I'm a writer. Directly and otherwise, a significant portion of my income has always derived from my ability to convey information in written form; it's safe to say that I do this for a living. And yet, I cannot seem to get \"its\" and \"it's\" right in my first drafts--I'm so consistently wrong that checking it is the first item on my personal proofreading list. Heck, this article is literally about the use of \"it's\" and \"its\", and I've had to correct the mistake twice already. Luckily for my writing ego, I'm not alone. I consume a lot of writing as well as producing it, and a surprisingly large percentage of the writers use the wrong form frequently. A quick google indicates that it's a problem for a very large number--perhaps even a majority--of \"casual\" writers of English. (It is, ironically, one of those mistakes made much less frequently by non-native speakers.) It's not that I don't know the rule, and I suspect it's not that other writers don't know the rule, either. We teach this distinction in roughly third or fourth grade in the US. My suspicion is that what we're looking at here is a conflict in how our brains deal with rules in general. Grammar is hard. The rules of English grammar alone are enough to fill a very long book, and--largely because English has borrowed from so many other languages over time--the rules often have exceptions: *\"I\" before \"E,\" * Except after \"C,\" Or when sound is \"long a\", As in \"neighbor\" and \"weigh,\" None of which helps a bit, With \"weird\" \"foreign\" words, like \"counterfeit.\" As an amusing(?) aside, a recent study found that the \"'I' before 'e'\" rule in English is actually wrong slightly more often than it's right. The exceptions don't just prove the rule, they outnumber it. If we had to pin down every rule, exception, and usage for everything we say or write, we'd never get to convey anything. So we rely on sentence patterns, experience, and rules of thumb to get us through. These \"rules of thumb\" are simpler rules that--hopefully--fail us rarely enough that it doesn't matter. We can keep enough of these simpler rules \"in our heads\" to help us through day to day conversations and writing, and either live with or deal with the exceptions in a separate pass or with separate tools. It's obvious that the particular rule set is at least somewhat personalized. Consider the sentence: \"Ameilia has less apples than Feifei.\" From my casual surveys, about half the people who hear that cringe internally, and the other half don't give it a second thought. The difference--one I think interesting enough to have its own article--is whether or not your personal rule set includes \"use 'fewer' rather than 'less' for countable items.\" So, back to \"it's\" and \"its.\" We have a few rules that apply here: Rule 1: Use an apostrophe followed by \"s\" after a singular noun or pronoun to indicate possession. (And an \"s\" followed by an apostrophe for plural ones.): \"Bob's hat,\" \"one's speech,\" \"the city schools' funding,\" \"dogs' rights.\" Rule 2: Use an apostrophe for left-out characters in a contraction: \"do not\" == \"don't,\" \"is not\" == \"isn't,\" \"it has\" == \"it's.\" The problem is that there are exceptions. Rule 3: We don't use apostrophe-s for pronouns, such as \"his\" for \"he,\" \"their\" or \"theirs\" for \"they,\" or \"hers\" for \"her.\" Rule 4: Rule (1) doesn't apply If the plural form doesn't end in \"s\", instead, we pretend it's singular: \"women's rights,\" not \"womens' rights.\" Rule 5: Rule (3) doesn't apply if there's not a specific possessive form of the pronoun: it's \"one's thoughts,\" not \"ones thoughts.\" Worse, there is at least one case where the correct form depends on usage: Rule 6: The form of \"they\" in the sentence \"That's their dog\" is different from the one in the semantically identical sentence \"That dog is theirs.\" \"Theirs\" is a possessive pronoun in this case, but \"their\" is a pronoun-derived possessive adjective . Which is an incredibly subtle distinction, but--weirdly--one that native speakers almost never get wrong, even though probably fewer than one such speaker in a hundred could tell you why. (And I'm not that one person; I looked it up.) So, that's a lot of rules so far. But why do people have trouble with \"it's\" and \"its,\" but not the others, even in cases like rule (6) that are, on the face of it, much harder? I'd argue it's because your brain has brought too many rules into play. Most possessive pronouns or adjectives have a form different from their base pronoun form: \"His,\" not \"hes\"; \"my,\" not \"Is\"; \"their,\" not \"theys\"; and so on. Rule three only really matches two pronouns whose possessive and base forms differ only by the added \"s\": \"her/hers\" and \"it/its.\" Some quick googling indicates that there's actually a fair amount of folks out there that incorrectly use \"her's,\" but nowhere near the level of \"it's.\" I suspect that it's because \"her\" is a complex usage-based pronoun/adjective, similar to rule (6) above. Rule 7: The feminine pronoun varies a lot based on usage: \"her\" as a pronoun, but only as the object of the sentence : \"I like her.\" \"hers\" as a possessive pronoun: \"That book is hers.\" \"her\" as a possessive adjective: \"Amy ate her lunch.\" \"She\" as the pronoun if it's the subject of the sentence: \"She likes me.\" In other words, if you use she/her/hers without further thinking about it, you're almost certain to get it wrong. So your brain has prioritized this rule as one to be applied first when you're using feminine pronouns. Perhaps more relevantly, you've probably internalized simple rule 8: Rule 8: \"Her's\" is never correct in any usage. Because English doesn't make contractions from nouns used as objects of sentences, there's no contraction form of \"her.\" \"She has\" or \"She is\" are both contractable--\"she's\" in both cases--but never \"her has\" or \"her is.\" At this point, you're probably sick of all these rules. And that's sort of the point; when your brain is trying to construct a sentence, it wants to get on with communicating, not go down checklists of grammatical minutia. And maybe more importantly, your brain evolved to listen, and to speak. Writing is comparatively modern, and even among those of us that do it professionally, we do a lot less of it than speaking and listening. In spoken English, there's no distinction between \"its\" and \"it's\" at all. So, when faced with the decision for a form of \"it,\" some of our brains pretty much give up after rules (1) and (2). In my experience, which rule gets applied tends to differ between people: I will incorrectly use \"it's\" when I mean \"its,\" but almost never the reverse, so my particular grey matter gives up after rule (1). I see others who primarily err the other direction. Why do non-native speakers have less trouble with this? Assuming that this statement is true (I have only anecdotal evidence to support it), my suspicion is because they're always bogged down in rules. Without a lifetime of internalizing patterns, you're basically forced to construct sentences by brute force, and so you're likely to spend more time with the internal checklists. It would be interesting to know whether or not this error starts to creep in as non-native speakers approach native fluency; I have no idea whether it does or not.","title":"If its \"it is\", its \"its\" is \"it's\""},{"location":"blog/runtime_navmesh/","tags":["Unity","procedural generation","technology","games"],"text":"#Unity #procedural generation #technology #games .md-typeset .blogging-tags-grid { display: flex; flex-direction: row; flex-wrap: wrap; gap: 8px; margin-top: 5px; } .md-typeset .blogging-tag { color: var(--md-typeset-color); background-color: var(--md-typeset-code-color); } .md-typeset .blogging-tag code { border-radius: 5px; } Asynchronous Runtime Navmesh Generation in Unity \u00b6 Buckle in, boys and girls. This one's going to be a ride. I've recently started trying to add monsters to the world I'm creating over in my Unity Procedural Terrain system. I'd like to use the NavMesh system for enemy AI, but since my terrains aren't created in the Unity Editor, but rather randomly at runtime, I need to be able to create the NavMeshes for my monsters at runtime. And thus began the rabbit hole. It became quickly obvious that it could be done, but equally obvious that there wasn't really a good known solution out there, particularly one that was performant enough to use in a runtime environment where terrains were being created and destroyed at a reasonably fast cadence as the player moves around a large open world. As every Unity developer knows, the Unity documentation is sort of like the Evil Stepmother of fairy tales: keeping up an appearance of caring about you while secretly undermining any chance you've got for success, and possibly actually poisoning you. [Author's Note] If anyone at Unity is reading this, please consider hiring me to come in and try and clean up some of that documentation, particularly the scripting side. Some simple rules and standards could make it infinitely more useful for actual developers. So I've dug into this, and it turns out that it's not actually as horrifying as it initially seems, although there's a few caveats. Let's see if we can clear it up a bit. Background \u00b6 Unity provides a built-in AI Navigation system for 3D games. This allows 3D entities to figure out where they can \"walk,\" and provides automatic pathing, obstacle avoidance, patrol points, target tracking, and the like. It's not going to pass the Turing test any time soon, but for many games it provides a moderately sophisticated level of \"enemy\" AI for relatively little effort. The two major components of this system are the NavMesh and the NavMeshAgent . NavMesh \u00b6 NavMesh is a property of the Scene . You can think of it as a sort of invisible carpet that covers the scene in places where an entity of a given size can walk. That is, it'll be all over the floor except right next to walls or under doors and arches that the entity is too large to pass through, or on slopes too steep for that entity to walk up. You can visualize a NavMesh in a scene by: Opening the Navigation Inspector (Window->AI->Navigation). You need to have the inspector active in order to see NavMeshes . Go to the Scene View Turn on Gizmos (either all of them, or the specific ones for Navigation AI). Move your viewpoint close enough to the mesh (navmeshes clip out after a few dozen units). If you've done all that\u2014and there's a NavMesh created for the Scene at all\u2014you should see a sort of blue layer across your walkable areas. Note that the NavMesh is pretty smart: it doesn't allow you to \"walk\" on the cliff faces or steeper areas, and avoids the larger rocks (though not the trees in this case). The image above actually shows two overlapping NavMeshes : one for fairly large entities (giants and such), and one for human-sized ones. You can see the difference particularly along the straight cliff edge, where smaller entities can approach much closer than large ones. Note that the NavMesh indicates where the center of the entity can travel, which is why it doesn't go right to the edges. (That screen shot is from a significant distance from the player in the center.) The NavMesh typically is built for \"walkable\" areas, although you have a great deal of flexibility in its creation. For example, you can mark certain areas as \"walkable, but harder,\" like mud, sand, or shallow water. The AI system will assign these areas higher cost, allowing the navigating to be \"smart\" about whether to walk through such an area or go around. It's also possible to add meshes with different \"up\" orientations, such as for spiders that can walk on walls or ceilings (linking them with \"off mesh links\"). You can't see it here because the distances are too large, but the NavMesh will also intelligently create \"jump\" points, where an entity cannot walk because of steepness or interrupted ground, but could safely jump up, down, or over. There are some other capabilities present, as well: the ability for meshes to connect to other meshes via physical joints or outright teleportation, and the ability to make anti-meshes (non-walkable areas) and the like. We won't be using those today. Finally, we need to note the difference between a NavMesh and a HeightMesh. NavMeshes are approximations to the surfaces they describe; in particular \"stairs\" and other steps tend to get smoothed out into ramps. This doesn't matter for the purposed of navigation, but it can make your entities sort of \"float\" above the ground if they're placed directly on the mesh. HeightMeshes are a similar process, but they're more expensive to build and follow the ground more or less precisely (each stair will be flat, for example). The system I'm describing here makes only NavMeshes, so you may need to tweak monster positions a little bit in order to make them stick to the ground. Ultimately NavMeshes describe connectivity : Our entity can move from any blue area to any connected blue area, jump from one blue area to another across paired jump zones, and not move at all through non-blue areas. One final tip here: You can turn on NavMesh gizmos in the Game view as well as the Scene view. This is horrible for performance; your frame rates will drop precipitously. But it can be useful to occasionally check the meshes from the \"point of view\" of the player. It's also generally easier to see the height offsets between the actual ground and the approximating NavMesh in Game view. NavMeshAgent \u00b6 The other half of the equation is the NavMeshAgent . This is a component that's placed on the gameobject representing the moving 3D entity. It describes the entity's size and movement characteristics, things like: Height Width (technically \"radius\" of an implicit capsule collider) Turn speed in degrees/second How high the agent can step How steep a slope the agent can walk up Speed, acceleration, and stopping distance The NavMeshAgent also includes an \"Agent Type ID\", which is defined in the Navigation window's Agents tab. This duplicates several of the other properties (height, radius, step size, slope), and I'm not at all sure why you have to specify both, since if they don't match, the NavMeshAgent won't work. We'll encounter the Agent Type under another name: \"Build Settings\" later in the process. We will need to generate one NavMesh for every Agent Type that will walk on it. Since it's expensive to make these (in both memory and computation time), you'll likely want to bucket all of your entities into 2-3 different agent types (or just one, if everybody's human), even if that means some of the sizes won't match exactly. (This doesn't apply as much if you're baking in the editor where time doesn't matter, but they still take up a fair amount of memory.) From scripts, we can access the agent in the usual way we access any component: NavMeshAgent _navMeshAgent = gameObject . GetComponent < NavMeshAgent >(); Once you've got the agent, you can set a destination with SetDestination(<Vector3>) and override the speed, acceleration, turn rate, etc. if you like (if you don't, they'll use the ones defined in the agent itself). The Vector3 passed to \"destination\" ignores the Y value unless the NavMesh overlaps itself in 3D. We actually turn it on by telling the agent it should no longer be stopped: _navMeshAgent . isStopped = false ; (You also need the usual stuff like making sure the component is enabled and active.) At this point, one of two things will happen: The agent will start to move the gameObject toward the destination (it controls facing and movement, things like animation are up to you), or you'll start getting tons of error messages about \" can only be called on an active agent that has been placed on a NavMesh.\" Let's ignore the errors for a moment. Assuming your agent is moving your gameObject, you can then use the remainingDistance property on the NavMeshAgent to figure out how far the agent is from its destination (say, to give it another waypoint on a patrol route.). There are two caveats with remainingDistance : 1) It will return 0 when the agent can go no farther. This doesn't necessarily mean that it's at the destination you originally specified, just that it's as close as the NavMesh allows to that point (which could be quite far away, if you specified a someplace way off the mesh). 2) If the agent can't move in a straight line to the destination, it tends to return Infinity while it traverses a path, up until the last \"leg.\" Once it's just on a straight-line route to it's destination, it'll start giving real numbers. Both of these mean that you'll not want to rely on remainingDistance for things like \"time to destination\" calculations, because they'll be as random as a Windows download progress bar. Generally you care if it's very near zero or if it isn't. (It actually seems OK to test for exactly zero, but I've got 45 years of experience telling me to be skittish about exact equality tests on floating point numbers.) You don't need to wait for it to reach a destination before assigning a new one. For example, if it's chasing a player, you can give it the player's position as the destination every few frames. NavAgent \"active agent ... placed on a NavMesh\" Errors \u00b6 OK, back to those errors. In what's probably the biggest understatement in this post: NavAgents are very picky about their placement on a mesh. Very picky. Unbelievably picky. As with many of these sorts of things, a sort of mythology develops, as devs find their superstitious practices that \"fix\" the problem: The position needs to be exactly on the mesh. The feet of your model need to be exactly on the mesh. The model needs a capsule collider of exactly the mesh's agent size. The agent needs to be disabled and then enabled again. The \"Lord of the Rings\" needs to be playing on the TV while you code. The capsule collider thing may be true. Some of the others might work, too, but especially if we're going to be moving these things at runtime on NavMeshes that come and go, we need to have a more reliable way of insuring it. There first thing to check is _navMeshAgent.isActiveAndEnabled . If that returns false, either the gameObject has been set to inactive or the NavMeshAgent component on it is disabled. These are both pretty standard checks for weird Unity behaviors. Next up, we can actually test if the agent is \"really\" on a mesh by asking it. _navMeshAgent.isOnNavMesh returns true , then the agent is properly placed on a NavMesh compatible with its agent. In this case, you should be good to go, and you won't get the \"active agent...\" errors for that particular game object. But what if isOnNavMesh returns false ? First off, verify that the Agent Type selected for the agent is compatible with the NavMesh that you believe it to be on. If you only create the \"humanoid\" NavMesh, and you've got a non-humanoid agent, it'll never work. Otherwise, we should be able to fix it. There's two pieces of \"magic sauce\" here. One of them its the NavMesh.SamplePosition function. Note that this is a class (\"static\" ) function on NavMesh. All of NavMesh's user-accessible functions are static; which means\u2014among other things\u2014that our options for moving it off-thread will be limited, later. SamplePosition () works a lot like Physics.Raycast() . It takes a starting position, tries to find the nearest NavMesh point from it, and returns that value if it works. So: if ( NavMesh . SamplePosition ( transform . position , out NavMeshHit hit , 8f , 1 )) { // \"hit.position\" now contains a valid position on the mesh } else { // We're not close enough to a valid mesh position, do something else } The arguments to SamplePosition are The \"test\" position, probably the location of your gameObject itself. An out parameter of type NavMeshHit to hold the valid point (if any) The greatest distance to look. The manual suggests that this should be limited to twice the height of the agent or else the test starts getting expensive, so \"8f\" may well not be the right value for you. That said, I suspect that \"twice the height\" is a typo, and they mean \"twice the radius,\" since I don't understand how height would have anything to do with it. An \"area mask\" for what part of the NavMesh you want to look at. \"1\" here is the area mask for \"Walkable\", which is often what you want. Alternatively, \"0xFFFF\" (or better, the constant NavMesh.AllAreas ) will give you an area mask with all bits set, which will find allow you to find valid jump points, high-cost walking areas, etc. If your NavMesh has a complex mix of areas, you can be as specific as you want. Look up the area number in the Navigation window, and left-shift \"1\" that many times to set a bit in the mask. (For example, if you want area \"3\", you'd use 1<<3 . If you want area \"3\" and area \"0\", use 1<<3 | 1<<0 , and so on. You may have encountered this before with layer masks, which work the same way.) If SamplePosition returns false, you're out of luck. If you are placing your \"monsters\" randomly, this one's likely in a position that's not walkable or reachable, outside the NavMesh area, or there's no current NavMesh at all. You'll need to determine what to do about it. If this is an initial random placement, try placing somewhere else. There's an example in the documentation for SamplePosition that shows how to use it to find a random point on a mesh, although it's a little, uh, \"hit or miss,\" if you'll excuse the pun. But let's say that SamplePosition has returned true , and now we've got a shiny valid position in hit.position . We can just set our transform.position = hit.position and we're off, right? Right? Of course not. Not always, anyway. It seems to work about half the time. To actually move there, use the NavMeshAgent.Warp() function. This will move the agent's object to the specified position and then apparently do some magic to glue it to the NavMesh. It returns true if successful, which should be basically always if you're feeding it a position from SamplePosition . if ( NavMesh . SamplePosition ( transform . position , out NavMeshHit hit , 8f , 1 )) { // \"hit.position\" now contains a valid position on the mesh if ( _navMeshAgent . Warp ( hit . position )) { // We're good, and the agent should work now. } else { // Something weird happened, probably the NavMesh or NavMeshAgent became invalid // somehow. We have to handle it, of course, but it's going to // be a rare case, so maybe just destroying the object is good enough? } } else { // We're not close enough to a valid mesh position, do something else } What we we talking about, again? \u00b6 Oh yeah. Runtime NavMesh generation. To build a NavMesh at runtime, we need to use a NavMeshBuilder, another class/static class in the AI system. Well, it's actually TWO classes. One's in UnityEngine.AI , the other one's in UnityEditor.AI . But they're documented on the same page, with little annotations for which of the two it applies to. And they have the same name. And do the same things. Except when they don't. Aside: Have I mentioned that the Unity scripting documentation is a crime against humanity? If anybody from Unity is reading this... As with all things runtime, we can only use the functions in UnityEngine.AI; editor functions aren't available to us. We'll come back to this in a bit. If you need to know the answer, you can skip to the end. But I think it's important to understand how to do it wrong, and use the learnings from that to figure out how to do it right. Components for Runtime NavMesh Building. \u00b6 So to start with, users have been wanting build NavMeshes at runtime for a very long time, probably as long as NavMesh has existed. At Unity headquarters, a great flaming eye perches atop a dark tower, sweeping over the landscape looking for developers to torture. At some point about 2016, it settled on developers trying to build runtime NavMeshes. The result was something called \"Components for Runtime NavMesh Building.\" You can learn all about it in a Unity Learn Tutorial here . These were a set of \"prerelease\" components available from a Github project that were eventually meant to end up in Unity itself. They worked by adding a component ( NavMeshSurface ) to the gameObjects that are part of the \"environment\" and then calling a function to go out and find all these, and use them to build a NavMesh. But the Eye of Unity is easily distracted, and it quickly went off to start a new incompatible render pipeline or something. This tutorial makes two claims of note: that these would eventually become part of Unity itself (they didn't), and that they are fast enough to use at runtime, even every frame, at least on simple stuff. That second claim is likely true for things like procedural dungeons with relatively simple structures, but it sure doesn't seem to work that fast on Terrains. You still see poor lost souls wandering the Internet trying to use these; any reference to NavMeshSurface is a red flag. Back away slowly and don't make eye contact. I've actually managed to get them working even in Unity 2021.3, but the fact that these components have been abandoned for half a decade now doesn't give us confidence in using them. Using NavMeshBuilder \u00b6 So let's go back to the \"low level\" API, and try to build this ourselves. There are basically four steps that we need to perform: 1) Collect a list of the surfaces we're interested in some volume of (virtual) space. 2) Get descriptions of each of the \"agent types\" we're going to build the NavMeshes for. 3) Construct a \"NavMeshData\" object by evaluating each of those agent types against the surfaces 4) Add (or replace) that NavMeshData to the scene's current NavMesh. Let's look at each of them. Collecting Sources \u00b6 The first thing we want to do is collect a list of the surfaces, or sources that are available as potential parts of our NavMesh. This list is independent of Agent Type, so we've only got to do it once for a given volume of space. This will be done with NavMeshBuilder.CollectSources() , which takes six parameters. The first thing we need to do is specify the volume of space that the NavMesh will be built in. The larger this space, the longer it takes to build the mesh; I'll give you some actual numbers later on. But however we determine it, we'll need to create a Bounds object with it. That's basically a cube or box with a center and a radius along each axis. Here I make one centered on the player. My world is very 3D, so I use the same radius on all three axis. If yours is relatively flat, you might want to use a much smaller value for \"y\". Bounds patchBounds = new Bounds ( player . transform . position , new Vector3 ( navigationMeshRadius , navigationMeshRadius , navigationMeshRadius )); Next, you may or may not want every object in your scene to potentially be a walkable surface; it depends on your game. If you want to limit it to just certain objects, collect them into a layer. I use one called \"Terrain\". We're going to need a layer mask , which we get similarly to the area masks we described above: int mask = 1 << LayerMask . NameToLayer ( \"Terrain\" ); If you need more layers, \"or\" them together: int mask = ( 1 << LayerMask . NameToLayer ( \"FirstLayer\" )) | ( 1 << LayerMask . NameToLayer ( \"SecondLayer\" )); And so on. You could use 0xFFFF to set all bits, but that's likely to get you some pretty weird layers, and it's fragile in the face of third-party assets that often add layers. Better to specify them exactly. Programmer Note: You'll often see \"+\" used instead of \"|\" to combine masks like this. That's fine, so long as there are no duplicate values in the mask . If there are, addition will get you the wrong answer. Next up, we decide whether we want to collect render surfaces or collider ones. Typically, we think of a NavMesh as avoiding things we want to not collide with, so usually NavMeshCollectGeometry.PhysicsColliders is the right answer. The next two parameters to our collection function are the default area type (0 for \"walkable\") and a list of NavMeshBuildMarkup objects. These are what college professors often refer to as \"left for the interested reader to discover.\" They allow you to build meshes with non-uniform surfaces in them (for example, hard ground and soft mud), but we'll just assume it's all uniform, and pass \"0\" and an empty list for these two. Finally, we pass an empty list of NavMeshBuildSources , and the function will fill them in for us. With these six decisions in hand, we're ready to call NavMeshBuilder.CollectSources , which will do the actual scan of the Scene to find the sources and return them to us: // Get the list of all \"sources\" around us. This is basically little gridded subsquares // of our terrains. List < NavMeshBuildSource > buildSources = new List < NavMeshBuildSource >(); // Set up a boundary area for the build sources collector to look at; Bounds patchBounds = new Bounds ( player . transform . position , new Vector3 ( Monster . navigationMeshRadius , Monster . navigationMeshRadius , Monster . navigationMeshRadius )); // This actually collects them NavMeshBuilder . CollectSources ( patchBounds , 1 << LayerMask . NameToLayer ( \"Terrain\" ), NavMeshCollectGeometry . PhysicsColliders , 0 , new List < NavMeshBuildMarkup >(), buildSources ); There's an alternate form of CollectSources that takes a GameObject as the first parameter (instead of the bounds) and builds only from that object and it's children. Depending on how your game objects are structured in the hierarchy, one of the other will likely be easiest for you. Get the Build Settings for each Agent Type \u00b6 This one's easy: for ( int agentIndex = 0 ; agentIndex < NavMesh . GetSettingsCount (); agentIndex ++) { // Get the settings for each of our agent \"sizes\" (humanoid, giant humanoid) NavMeshBuildSettings bSettings = NavMesh . GetSettingsByIndex ( agentIndex ); ... } We can treat the NavMeshBuildSettings object as opaque, but if you look into it, you'll see it pretty much just contains all those values we set in the Navigation Window's \"Agents\" tab. But there's a handy function on NavMeshBuildSettings objects (a member function, not a class/static function) called ValidationReport . You use it like this: #if DEBUG // If there are any issues with the agent, print them out as a warning. foreach ( string s in bSettings . ValidationReport ( patchBounds )) { Debug . LogWarning ( $\"BuildSettings Report: {NavMesh.GetSettingsNameFromID(bSettings.agentTypeID)} : {s}\" ); } #endif This will verify that various of the parameters in each Agent Type's build settings are compatible; typically \"Step Size\" and \"Maximum Slope\" are the ones most likely to conflict. These don't necessarily make the NavMesh unusable, but you'll get some weird NavMeshAgent behaviors if you just ignore the warnings. The warning will tell you exactly what parameters are incompatible and what values will make them compatible. Build the NavMeshData \u00b6 Now that we've got all that, we need to use it to build the actual NavMeshData . For that, we call NavMeshBuilder.BuildNavMeshData for each Agent Type : NavMeshData newData = NavMeshBuilder . BuildNavMeshData ( bSettings , buildSources , patchBounds , transform . position , Quaternion . Euler ( Vector3 . up )); The first three parameters there, we've already discussed, the fourth is the center of the NavMesh and should match the center position of patch bounds, and the last is the \"up\" vector for the local space. This is where the real work is happening. Once it completes, we effectively have our new NavMesh in hand, and we just need to make it available to the scene. Add the NavMesh to the Scene \u00b6 This one's easy, too: NavMesh . AddNavMeshData ( meshData ); The new NavMesh will be available for NavMeshAgents and viewing in the Scene editor on the next frame. Note that if this is a replacement for an existing NavMesh (you're moving around a large open world with a floating origin system that moves the terrains, hypothetically ), there are a couple more steps: First, we'll need to remove the existing NavMesh before we add the new one. NavMesh . RemoveAllNavMeshData (); NavMesh . AddNavMeshData ( meshData ); And second, we'll need to walk through every NavMeshAgent and \"re-attach\" them to the new mesh by calling NavMesh.SamplePosition() and NavMeshAgent.Warp() on them. That's it! We've successfully made a NavMesh at runtime. We're done! Wait, why are you still here? \u00b6 OK, maybe we're done. Does your game have discrete levels with loading screens or other natural breaks between them? Then the code above should work fine for you. The fact that the NavMesh takes a fairly long time to generate can be \"hidden\" in the level transition, even an extra second might not be a dealbreaker. But how 'bout that floating origin system we were talking about, above\u2014or a game where deformation of the levels (explosions taking out walls, collapsing floors, sliding walls, portcullises, or whatever) can invalidate the NavMesh during play, requiring us to rebuild one. Well, the above code might still work for you. It depends on the complexity (and raw size) of your level, and the frame rate you want to maintain. Turn-based games might still be fine. Maybe. Let's look at some numbers. I just used the System.Diagnostics.Stopwatch to record elapsed time markers in at various places, them printed them out after the process was complete (using Debug.Log or other printing during the process would affect the results). Assuming we want our game to run at 120 frames/second, that gives us a budget of 1000/120 = about 8 milliseconds per frame. Your frame rate needs may vary. That 8 ms is the total time available; not just for mesh generation, but everything else that Unity needs to do in a frame. That's a perfect world -- it's usually OK for a frame to occasionally run long, but we need the total number of milliseconds per frame to be low, ideally single digits. So here's my results on two different machines. The first is a first generation Apple Silicon Mac, (Mac Studio M1 \"Max\", if it matters), and the other on a PC with a Ryzen 7 3700 processor and an Nvidia RTX 3080 video card, so comparable, high-end systems in most respects: Mac Windows Collect Sources 0 ms 1 ms Get Build Sources 1 ms 2 ms Build NavMesh 780 ms 1280 ms Add To NavMesh 1 ms 0 ms So...Good News and Bad News? Those small numbers have some randomness in them because I'm only sampling to the millisecond, but clearly most of these steps aren't going to give us any trouble. The problem, clearly, is that Build NavMesh step. This was for a 700 meter radius on a generated terrain. Not huge, by level standards, but it took more than a second on Windows, and a significant fraction of one on the Mac. And remember that these are high-end systems. The average mid-range gaming machine or MacBook Air is going to do a lot worse. By lowering the radius to 250 meters, I got down to about 100 ms on the Mac, so we have one knob we can play with. But even with that change, there's a very, very obvious stutter when the NavMesh rebuilds. It would be almost impossible to hide. We could lower the radius even more (maybe 50 meters), and build a little bit of the mesh each frame, adding them together over time. But that's a pain to write, and we'd be better off using some asynchronous method (co-routines, jobs, or some other mechanism) to spread the work out more conventionally, instead. So let's look back at that NavMeshBuilder documentation page. There it is! \" BuildNavMeshAsync !\" We're saved. ...except for that \"(UnityEditor)\" at the end of it. It's literally exactly what we want, but we're not allowed to use it at runtime. Aside: OK, what the HECK Unity? In what possible universe does it make sense for the non-time-dependent editor building to be asynchronous, but the runtime version where literally 100% of the users are going to need it to be fast not be? That's not just annoying, it's way past the line into \"actively malicious.\" At this point we should run through our list of obscenities, but once we're done, note that there's one more possibility: UpdateNavMeshDataAsync() . This is similar to BuildNavMeshData , except that it adds or removes data from an existing NavMeshData object (and doesn't take an \"up\" vector, so it can only be used for standard orientations). We can work with that. It's a little weird, but if we just make an empty NavMeshData object and then \"Update\" it with all the data, we'll get the same end result. Something like: // Make a new mesh data object. NavMeshData meshData = new NavMeshData (); // \"Update\" it from scratch. AsyncOperation buildOp = NavMeshBuilder . UpdateNavMeshDataAsync ( meshData , bSettings , buildSources , patchBounds ); Note that UpdateNavMeshDataAsync returns an AsyncOperation , one of the approximately 52,937,419 different asynchronous mechanisms in .NET (the Flaming Eye of Microsoft is also easily distracted, especially with developer frameworks). Off the top of my head, I don't even remember whether this one moves the work off-thread or not; for our purposes, it doesn't really matter. Rebuild for Asynchronicity \u00b6 So the trick here is that we're going to need to move this work to a co-routine, and re-arrange things a little bit to make it work. It's not going to be a perfect solution; it's still going to take some time for our new NavMesh to be ready, we're just not going to interrupt the rest of the game while we wait for it. If you're in a scenario where you can keep using the old mesh until the new one is available; you should. If you can't (your \"terrain\" objects are changing position, origin, or whatever), you'll need to be prepared for there to be some time when your NavMeshAgents have no mesh to use, and do something intelligent with that time (move them in a straight line, idle them, have them stand and guard, or taunt, whatever). But in return for that bit of complexity, we should be able to easily do the actual mesh exchange in a millisecond or two, so frame rate shouldn't t be affected at all. Your coroutine may look a little different from mine, depending on where you get some of your parameters from, but I'm going to pass in the center point of the new mesh bounds, a single radius for all axes, and a boolean flag for whether I'm adding to or replacing an existing mesh. Here's the whole thing: /// <summary> /// Coroutine to rebuild the current Scene NavMesh. /// </summary> /// <param name=\"playerPosition\">The center of the mesh search volume</param> /// <param name=\"navigationMeshRadius\">How big a volume should we search for surfaces in.</param> /// <param name=\"rebuildAll\">If \"true\", delete any existing meshes before adding new ones.</param> /// <returns></returns> IEnumerator NavMeshOutOfDateCoroutine ( Vector3 playerPosition , float navigationMeshRadius , bool rebuildAll ) { // Get the list of all \"sources\" around us. This is basically little gridded subsquares // of our terrains. List < NavMeshBuildSource > buildSources = new List < NavMeshBuildSource >(); // Set up a boundary area for the build sources collector to look at; Bounds patchBounds = new Bounds ( playerPosition , new Vector3 ( navigationMeshRadius , navigationMeshRadius , navigationMeshRadius )); // This actually collects the potential surfaces. NavMeshBuilder . CollectSources ( patchBounds , 1 << LayerMask . NameToLayer ( \"Terrain\" ), NavMeshCollectGeometry . PhysicsColliders , 0 , new List < NavMeshBuildMarkup >(), buildSources ); yield return null ; // Build some empty NavMeshData objects int numAgentTypes = NavMesh . GetSettingsCount (); NavMeshData [] meshData = new NavMeshData [ numAgentTypes ]; for ( int agentIndex = 0 ; agentIndex < numAgentTypes ; agentIndex ++) { // Get the settings for each of our agent \"sizes\" (humanoid, giant humanoid) NavMeshBuildSettings bSettings = NavMesh . GetSettingsByIndex ( agentIndex ); // If there are any issues with the agent, print them out as a warning. #if DEBUG foreach ( string s in bSettings . ValidationReport ( patchBounds )) { Debug . LogWarning ( $\"BuildSettings Report: {NavMesh.GetSettingsNameFromID(bSettings.agentTypeID)} : {s}\" ); } #endif // Make empty mesh data object. meshData [ agentIndex ] = new NavMeshData (); AsyncOperation buildOp = NavMeshBuilder . UpdateNavMeshDataAsync ( meshData [ agentIndex ], bSettings , buildSources , patchBounds ); while (! buildOp . isDone ) yield return null ; } if ( rebuildAll ) { NavMesh . RemoveAllNavMeshData (); } for ( int nmd = 0 ; nmd < meshData . Length ; nmd ++) { NavMesh . AddNavMeshData ( meshData [ nmd ]); } yield return null ; } There are a few key lines there, particularly the various yield return null; ones. If you're not familiar with coroutines, that's just code for \"stop here for this frame, go do whatever else you want, and resume here on the next frame.\" In particular, most of the (non) work is done by: while (! buildOp . isDone ) yield return null ; That line is where most of the time in the coroutine is spent. It just checks to see \"is the AsyncOperation done, yet?\" And yields until the next frame if it isn't. Eventually, everything completes and the rest of the code takes only a few milliseconds to actually instantiate the mesh. Also note that we build all the meshes, then remove existing ones (if we're going to), then add the new ones all at once rather than as each one is built. This minimizes the time when no mesh exists at all -- in fact, since there's no yield between the removal and the adds, the new mesh should be available in the very same frame as the old one goes away. (The old NavMesh may or may not still be valid that long, but for most uses it won't matter if it hangs around while we make the new one.) So does it work? \u00b6 In a nutshell, yes. There's no stutter at all when new NavMeshes are being built or instantiated; I had to put Debug logging in or keep the scene window open even to know when it happened. Was it worth all that effort? Also, yes; being able to build at runtime without destroying the frame rate makes possible scenarios that otherwise wouldn't be, even if the \"wait\" for the NavMesh to become available isn't ideal. For small NavMeshes (a simple dungeon level, basement, maybe even a small village or house), this may very well be usable even several times a second (it can't be every frame because of the yield returns ). And for much larger or more complex meshes, it at least makes building them possible .","title":"Asynchronous Runtime Navmesh Generation in Unity"},{"location":"blog/runtime_navmesh/#asynchronous-runtime-navmesh-generation-in-unity","text":"Buckle in, boys and girls. This one's going to be a ride. I've recently started trying to add monsters to the world I'm creating over in my Unity Procedural Terrain system. I'd like to use the NavMesh system for enemy AI, but since my terrains aren't created in the Unity Editor, but rather randomly at runtime, I need to be able to create the NavMeshes for my monsters at runtime. And thus began the rabbit hole. It became quickly obvious that it could be done, but equally obvious that there wasn't really a good known solution out there, particularly one that was performant enough to use in a runtime environment where terrains were being created and destroyed at a reasonably fast cadence as the player moves around a large open world. As every Unity developer knows, the Unity documentation is sort of like the Evil Stepmother of fairy tales: keeping up an appearance of caring about you while secretly undermining any chance you've got for success, and possibly actually poisoning you. [Author's Note] If anyone at Unity is reading this, please consider hiring me to come in and try and clean up some of that documentation, particularly the scripting side. Some simple rules and standards could make it infinitely more useful for actual developers. So I've dug into this, and it turns out that it's not actually as horrifying as it initially seems, although there's a few caveats. Let's see if we can clear it up a bit.","title":"Asynchronous Runtime Navmesh Generation in Unity"},{"location":"blog/runtime_navmesh/#background","text":"Unity provides a built-in AI Navigation system for 3D games. This allows 3D entities to figure out where they can \"walk,\" and provides automatic pathing, obstacle avoidance, patrol points, target tracking, and the like. It's not going to pass the Turing test any time soon, but for many games it provides a moderately sophisticated level of \"enemy\" AI for relatively little effort. The two major components of this system are the NavMesh and the NavMeshAgent .","title":"Background"},{"location":"blog/runtime_navmesh/#navmesh","text":"NavMesh is a property of the Scene . You can think of it as a sort of invisible carpet that covers the scene in places where an entity of a given size can walk. That is, it'll be all over the floor except right next to walls or under doors and arches that the entity is too large to pass through, or on slopes too steep for that entity to walk up. You can visualize a NavMesh in a scene by: Opening the Navigation Inspector (Window->AI->Navigation). You need to have the inspector active in order to see NavMeshes . Go to the Scene View Turn on Gizmos (either all of them, or the specific ones for Navigation AI). Move your viewpoint close enough to the mesh (navmeshes clip out after a few dozen units). If you've done all that\u2014and there's a NavMesh created for the Scene at all\u2014you should see a sort of blue layer across your walkable areas. Note that the NavMesh is pretty smart: it doesn't allow you to \"walk\" on the cliff faces or steeper areas, and avoids the larger rocks (though not the trees in this case). The image above actually shows two overlapping NavMeshes : one for fairly large entities (giants and such), and one for human-sized ones. You can see the difference particularly along the straight cliff edge, where smaller entities can approach much closer than large ones. Note that the NavMesh indicates where the center of the entity can travel, which is why it doesn't go right to the edges. (That screen shot is from a significant distance from the player in the center.) The NavMesh typically is built for \"walkable\" areas, although you have a great deal of flexibility in its creation. For example, you can mark certain areas as \"walkable, but harder,\" like mud, sand, or shallow water. The AI system will assign these areas higher cost, allowing the navigating to be \"smart\" about whether to walk through such an area or go around. It's also possible to add meshes with different \"up\" orientations, such as for spiders that can walk on walls or ceilings (linking them with \"off mesh links\"). You can't see it here because the distances are too large, but the NavMesh will also intelligently create \"jump\" points, where an entity cannot walk because of steepness or interrupted ground, but could safely jump up, down, or over. There are some other capabilities present, as well: the ability for meshes to connect to other meshes via physical joints or outright teleportation, and the ability to make anti-meshes (non-walkable areas) and the like. We won't be using those today. Finally, we need to note the difference between a NavMesh and a HeightMesh. NavMeshes are approximations to the surfaces they describe; in particular \"stairs\" and other steps tend to get smoothed out into ramps. This doesn't matter for the purposed of navigation, but it can make your entities sort of \"float\" above the ground if they're placed directly on the mesh. HeightMeshes are a similar process, but they're more expensive to build and follow the ground more or less precisely (each stair will be flat, for example). The system I'm describing here makes only NavMeshes, so you may need to tweak monster positions a little bit in order to make them stick to the ground. Ultimately NavMeshes describe connectivity : Our entity can move from any blue area to any connected blue area, jump from one blue area to another across paired jump zones, and not move at all through non-blue areas. One final tip here: You can turn on NavMesh gizmos in the Game view as well as the Scene view. This is horrible for performance; your frame rates will drop precipitously. But it can be useful to occasionally check the meshes from the \"point of view\" of the player. It's also generally easier to see the height offsets between the actual ground and the approximating NavMesh in Game view.","title":"NavMesh"},{"location":"blog/runtime_navmesh/#navmeshagent","text":"The other half of the equation is the NavMeshAgent . This is a component that's placed on the gameobject representing the moving 3D entity. It describes the entity's size and movement characteristics, things like: Height Width (technically \"radius\" of an implicit capsule collider) Turn speed in degrees/second How high the agent can step How steep a slope the agent can walk up Speed, acceleration, and stopping distance The NavMeshAgent also includes an \"Agent Type ID\", which is defined in the Navigation window's Agents tab. This duplicates several of the other properties (height, radius, step size, slope), and I'm not at all sure why you have to specify both, since if they don't match, the NavMeshAgent won't work. We'll encounter the Agent Type under another name: \"Build Settings\" later in the process. We will need to generate one NavMesh for every Agent Type that will walk on it. Since it's expensive to make these (in both memory and computation time), you'll likely want to bucket all of your entities into 2-3 different agent types (or just one, if everybody's human), even if that means some of the sizes won't match exactly. (This doesn't apply as much if you're baking in the editor where time doesn't matter, but they still take up a fair amount of memory.) From scripts, we can access the agent in the usual way we access any component: NavMeshAgent _navMeshAgent = gameObject . GetComponent < NavMeshAgent >(); Once you've got the agent, you can set a destination with SetDestination(<Vector3>) and override the speed, acceleration, turn rate, etc. if you like (if you don't, they'll use the ones defined in the agent itself). The Vector3 passed to \"destination\" ignores the Y value unless the NavMesh overlaps itself in 3D. We actually turn it on by telling the agent it should no longer be stopped: _navMeshAgent . isStopped = false ; (You also need the usual stuff like making sure the component is enabled and active.) At this point, one of two things will happen: The agent will start to move the gameObject toward the destination (it controls facing and movement, things like animation are up to you), or you'll start getting tons of error messages about \" can only be called on an active agent that has been placed on a NavMesh.\" Let's ignore the errors for a moment. Assuming your agent is moving your gameObject, you can then use the remainingDistance property on the NavMeshAgent to figure out how far the agent is from its destination (say, to give it another waypoint on a patrol route.). There are two caveats with remainingDistance : 1) It will return 0 when the agent can go no farther. This doesn't necessarily mean that it's at the destination you originally specified, just that it's as close as the NavMesh allows to that point (which could be quite far away, if you specified a someplace way off the mesh). 2) If the agent can't move in a straight line to the destination, it tends to return Infinity while it traverses a path, up until the last \"leg.\" Once it's just on a straight-line route to it's destination, it'll start giving real numbers. Both of these mean that you'll not want to rely on remainingDistance for things like \"time to destination\" calculations, because they'll be as random as a Windows download progress bar. Generally you care if it's very near zero or if it isn't. (It actually seems OK to test for exactly zero, but I've got 45 years of experience telling me to be skittish about exact equality tests on floating point numbers.) You don't need to wait for it to reach a destination before assigning a new one. For example, if it's chasing a player, you can give it the player's position as the destination every few frames.","title":"NavMeshAgent"},{"location":"blog/runtime_navmesh/#navagent-active-agent-placed-on-a-navmesh-errors","text":"OK, back to those errors. In what's probably the biggest understatement in this post: NavAgents are very picky about their placement on a mesh. Very picky. Unbelievably picky. As with many of these sorts of things, a sort of mythology develops, as devs find their superstitious practices that \"fix\" the problem: The position needs to be exactly on the mesh. The feet of your model need to be exactly on the mesh. The model needs a capsule collider of exactly the mesh's agent size. The agent needs to be disabled and then enabled again. The \"Lord of the Rings\" needs to be playing on the TV while you code. The capsule collider thing may be true. Some of the others might work, too, but especially if we're going to be moving these things at runtime on NavMeshes that come and go, we need to have a more reliable way of insuring it. There first thing to check is _navMeshAgent.isActiveAndEnabled . If that returns false, either the gameObject has been set to inactive or the NavMeshAgent component on it is disabled. These are both pretty standard checks for weird Unity behaviors. Next up, we can actually test if the agent is \"really\" on a mesh by asking it. _navMeshAgent.isOnNavMesh returns true , then the agent is properly placed on a NavMesh compatible with its agent. In this case, you should be good to go, and you won't get the \"active agent...\" errors for that particular game object. But what if isOnNavMesh returns false ? First off, verify that the Agent Type selected for the agent is compatible with the NavMesh that you believe it to be on. If you only create the \"humanoid\" NavMesh, and you've got a non-humanoid agent, it'll never work. Otherwise, we should be able to fix it. There's two pieces of \"magic sauce\" here. One of them its the NavMesh.SamplePosition function. Note that this is a class (\"static\" ) function on NavMesh. All of NavMesh's user-accessible functions are static; which means\u2014among other things\u2014that our options for moving it off-thread will be limited, later. SamplePosition () works a lot like Physics.Raycast() . It takes a starting position, tries to find the nearest NavMesh point from it, and returns that value if it works. So: if ( NavMesh . SamplePosition ( transform . position , out NavMeshHit hit , 8f , 1 )) { // \"hit.position\" now contains a valid position on the mesh } else { // We're not close enough to a valid mesh position, do something else } The arguments to SamplePosition are The \"test\" position, probably the location of your gameObject itself. An out parameter of type NavMeshHit to hold the valid point (if any) The greatest distance to look. The manual suggests that this should be limited to twice the height of the agent or else the test starts getting expensive, so \"8f\" may well not be the right value for you. That said, I suspect that \"twice the height\" is a typo, and they mean \"twice the radius,\" since I don't understand how height would have anything to do with it. An \"area mask\" for what part of the NavMesh you want to look at. \"1\" here is the area mask for \"Walkable\", which is often what you want. Alternatively, \"0xFFFF\" (or better, the constant NavMesh.AllAreas ) will give you an area mask with all bits set, which will find allow you to find valid jump points, high-cost walking areas, etc. If your NavMesh has a complex mix of areas, you can be as specific as you want. Look up the area number in the Navigation window, and left-shift \"1\" that many times to set a bit in the mask. (For example, if you want area \"3\", you'd use 1<<3 . If you want area \"3\" and area \"0\", use 1<<3 | 1<<0 , and so on. You may have encountered this before with layer masks, which work the same way.) If SamplePosition returns false, you're out of luck. If you are placing your \"monsters\" randomly, this one's likely in a position that's not walkable or reachable, outside the NavMesh area, or there's no current NavMesh at all. You'll need to determine what to do about it. If this is an initial random placement, try placing somewhere else. There's an example in the documentation for SamplePosition that shows how to use it to find a random point on a mesh, although it's a little, uh, \"hit or miss,\" if you'll excuse the pun. But let's say that SamplePosition has returned true , and now we've got a shiny valid position in hit.position . We can just set our transform.position = hit.position and we're off, right? Right? Of course not. Not always, anyway. It seems to work about half the time. To actually move there, use the NavMeshAgent.Warp() function. This will move the agent's object to the specified position and then apparently do some magic to glue it to the NavMesh. It returns true if successful, which should be basically always if you're feeding it a position from SamplePosition . if ( NavMesh . SamplePosition ( transform . position , out NavMeshHit hit , 8f , 1 )) { // \"hit.position\" now contains a valid position on the mesh if ( _navMeshAgent . Warp ( hit . position )) { // We're good, and the agent should work now. } else { // Something weird happened, probably the NavMesh or NavMeshAgent became invalid // somehow. We have to handle it, of course, but it's going to // be a rare case, so maybe just destroying the object is good enough? } } else { // We're not close enough to a valid mesh position, do something else }","title":"NavAgent \"active agent ... placed on a NavMesh\" Errors"},{"location":"blog/runtime_navmesh/#what-we-we-talking-about-again","text":"Oh yeah. Runtime NavMesh generation. To build a NavMesh at runtime, we need to use a NavMeshBuilder, another class/static class in the AI system. Well, it's actually TWO classes. One's in UnityEngine.AI , the other one's in UnityEditor.AI . But they're documented on the same page, with little annotations for which of the two it applies to. And they have the same name. And do the same things. Except when they don't. Aside: Have I mentioned that the Unity scripting documentation is a crime against humanity? If anybody from Unity is reading this... As with all things runtime, we can only use the functions in UnityEngine.AI; editor functions aren't available to us. We'll come back to this in a bit. If you need to know the answer, you can skip to the end. But I think it's important to understand how to do it wrong, and use the learnings from that to figure out how to do it right.","title":"What we we talking about, again?"},{"location":"blog/runtime_navmesh/#components-for-runtime-navmesh-building","text":"So to start with, users have been wanting build NavMeshes at runtime for a very long time, probably as long as NavMesh has existed. At Unity headquarters, a great flaming eye perches atop a dark tower, sweeping over the landscape looking for developers to torture. At some point about 2016, it settled on developers trying to build runtime NavMeshes. The result was something called \"Components for Runtime NavMesh Building.\" You can learn all about it in a Unity Learn Tutorial here . These were a set of \"prerelease\" components available from a Github project that were eventually meant to end up in Unity itself. They worked by adding a component ( NavMeshSurface ) to the gameObjects that are part of the \"environment\" and then calling a function to go out and find all these, and use them to build a NavMesh. But the Eye of Unity is easily distracted, and it quickly went off to start a new incompatible render pipeline or something. This tutorial makes two claims of note: that these would eventually become part of Unity itself (they didn't), and that they are fast enough to use at runtime, even every frame, at least on simple stuff. That second claim is likely true for things like procedural dungeons with relatively simple structures, but it sure doesn't seem to work that fast on Terrains. You still see poor lost souls wandering the Internet trying to use these; any reference to NavMeshSurface is a red flag. Back away slowly and don't make eye contact. I've actually managed to get them working even in Unity 2021.3, but the fact that these components have been abandoned for half a decade now doesn't give us confidence in using them.","title":"Components for Runtime NavMesh Building."},{"location":"blog/runtime_navmesh/#using-navmeshbuilder","text":"So let's go back to the \"low level\" API, and try to build this ourselves. There are basically four steps that we need to perform: 1) Collect a list of the surfaces we're interested in some volume of (virtual) space. 2) Get descriptions of each of the \"agent types\" we're going to build the NavMeshes for. 3) Construct a \"NavMeshData\" object by evaluating each of those agent types against the surfaces 4) Add (or replace) that NavMeshData to the scene's current NavMesh. Let's look at each of them.","title":"Using NavMeshBuilder"},{"location":"blog/runtime_navmesh/#collecting-sources","text":"The first thing we want to do is collect a list of the surfaces, or sources that are available as potential parts of our NavMesh. This list is independent of Agent Type, so we've only got to do it once for a given volume of space. This will be done with NavMeshBuilder.CollectSources() , which takes six parameters. The first thing we need to do is specify the volume of space that the NavMesh will be built in. The larger this space, the longer it takes to build the mesh; I'll give you some actual numbers later on. But however we determine it, we'll need to create a Bounds object with it. That's basically a cube or box with a center and a radius along each axis. Here I make one centered on the player. My world is very 3D, so I use the same radius on all three axis. If yours is relatively flat, you might want to use a much smaller value for \"y\". Bounds patchBounds = new Bounds ( player . transform . position , new Vector3 ( navigationMeshRadius , navigationMeshRadius , navigationMeshRadius )); Next, you may or may not want every object in your scene to potentially be a walkable surface; it depends on your game. If you want to limit it to just certain objects, collect them into a layer. I use one called \"Terrain\". We're going to need a layer mask , which we get similarly to the area masks we described above: int mask = 1 << LayerMask . NameToLayer ( \"Terrain\" ); If you need more layers, \"or\" them together: int mask = ( 1 << LayerMask . NameToLayer ( \"FirstLayer\" )) | ( 1 << LayerMask . NameToLayer ( \"SecondLayer\" )); And so on. You could use 0xFFFF to set all bits, but that's likely to get you some pretty weird layers, and it's fragile in the face of third-party assets that often add layers. Better to specify them exactly. Programmer Note: You'll often see \"+\" used instead of \"|\" to combine masks like this. That's fine, so long as there are no duplicate values in the mask . If there are, addition will get you the wrong answer. Next up, we decide whether we want to collect render surfaces or collider ones. Typically, we think of a NavMesh as avoiding things we want to not collide with, so usually NavMeshCollectGeometry.PhysicsColliders is the right answer. The next two parameters to our collection function are the default area type (0 for \"walkable\") and a list of NavMeshBuildMarkup objects. These are what college professors often refer to as \"left for the interested reader to discover.\" They allow you to build meshes with non-uniform surfaces in them (for example, hard ground and soft mud), but we'll just assume it's all uniform, and pass \"0\" and an empty list for these two. Finally, we pass an empty list of NavMeshBuildSources , and the function will fill them in for us. With these six decisions in hand, we're ready to call NavMeshBuilder.CollectSources , which will do the actual scan of the Scene to find the sources and return them to us: // Get the list of all \"sources\" around us. This is basically little gridded subsquares // of our terrains. List < NavMeshBuildSource > buildSources = new List < NavMeshBuildSource >(); // Set up a boundary area for the build sources collector to look at; Bounds patchBounds = new Bounds ( player . transform . position , new Vector3 ( Monster . navigationMeshRadius , Monster . navigationMeshRadius , Monster . navigationMeshRadius )); // This actually collects them NavMeshBuilder . CollectSources ( patchBounds , 1 << LayerMask . NameToLayer ( \"Terrain\" ), NavMeshCollectGeometry . PhysicsColliders , 0 , new List < NavMeshBuildMarkup >(), buildSources ); There's an alternate form of CollectSources that takes a GameObject as the first parameter (instead of the bounds) and builds only from that object and it's children. Depending on how your game objects are structured in the hierarchy, one of the other will likely be easiest for you.","title":"Collecting Sources"},{"location":"blog/runtime_navmesh/#get-the-build-settings-for-each-agent-type","text":"This one's easy: for ( int agentIndex = 0 ; agentIndex < NavMesh . GetSettingsCount (); agentIndex ++) { // Get the settings for each of our agent \"sizes\" (humanoid, giant humanoid) NavMeshBuildSettings bSettings = NavMesh . GetSettingsByIndex ( agentIndex ); ... } We can treat the NavMeshBuildSettings object as opaque, but if you look into it, you'll see it pretty much just contains all those values we set in the Navigation Window's \"Agents\" tab. But there's a handy function on NavMeshBuildSettings objects (a member function, not a class/static function) called ValidationReport . You use it like this: #if DEBUG // If there are any issues with the agent, print them out as a warning. foreach ( string s in bSettings . ValidationReport ( patchBounds )) { Debug . LogWarning ( $\"BuildSettings Report: {NavMesh.GetSettingsNameFromID(bSettings.agentTypeID)} : {s}\" ); } #endif This will verify that various of the parameters in each Agent Type's build settings are compatible; typically \"Step Size\" and \"Maximum Slope\" are the ones most likely to conflict. These don't necessarily make the NavMesh unusable, but you'll get some weird NavMeshAgent behaviors if you just ignore the warnings. The warning will tell you exactly what parameters are incompatible and what values will make them compatible.","title":"Get the Build Settings for each Agent Type"},{"location":"blog/runtime_navmesh/#build-the-navmeshdata","text":"Now that we've got all that, we need to use it to build the actual NavMeshData . For that, we call NavMeshBuilder.BuildNavMeshData for each Agent Type : NavMeshData newData = NavMeshBuilder . BuildNavMeshData ( bSettings , buildSources , patchBounds , transform . position , Quaternion . Euler ( Vector3 . up )); The first three parameters there, we've already discussed, the fourth is the center of the NavMesh and should match the center position of patch bounds, and the last is the \"up\" vector for the local space. This is where the real work is happening. Once it completes, we effectively have our new NavMesh in hand, and we just need to make it available to the scene.","title":"Build the NavMeshData"},{"location":"blog/runtime_navmesh/#add-the-navmesh-to-the-scene","text":"This one's easy, too: NavMesh . AddNavMeshData ( meshData ); The new NavMesh will be available for NavMeshAgents and viewing in the Scene editor on the next frame. Note that if this is a replacement for an existing NavMesh (you're moving around a large open world with a floating origin system that moves the terrains, hypothetically ), there are a couple more steps: First, we'll need to remove the existing NavMesh before we add the new one. NavMesh . RemoveAllNavMeshData (); NavMesh . AddNavMeshData ( meshData ); And second, we'll need to walk through every NavMeshAgent and \"re-attach\" them to the new mesh by calling NavMesh.SamplePosition() and NavMeshAgent.Warp() on them. That's it! We've successfully made a NavMesh at runtime. We're done!","title":"Add the NavMesh to the Scene"},{"location":"blog/runtime_navmesh/#wait-why-are-you-still-here","text":"OK, maybe we're done. Does your game have discrete levels with loading screens or other natural breaks between them? Then the code above should work fine for you. The fact that the NavMesh takes a fairly long time to generate can be \"hidden\" in the level transition, even an extra second might not be a dealbreaker. But how 'bout that floating origin system we were talking about, above\u2014or a game where deformation of the levels (explosions taking out walls, collapsing floors, sliding walls, portcullises, or whatever) can invalidate the NavMesh during play, requiring us to rebuild one. Well, the above code might still work for you. It depends on the complexity (and raw size) of your level, and the frame rate you want to maintain. Turn-based games might still be fine. Maybe. Let's look at some numbers. I just used the System.Diagnostics.Stopwatch to record elapsed time markers in at various places, them printed them out after the process was complete (using Debug.Log or other printing during the process would affect the results). Assuming we want our game to run at 120 frames/second, that gives us a budget of 1000/120 = about 8 milliseconds per frame. Your frame rate needs may vary. That 8 ms is the total time available; not just for mesh generation, but everything else that Unity needs to do in a frame. That's a perfect world -- it's usually OK for a frame to occasionally run long, but we need the total number of milliseconds per frame to be low, ideally single digits. So here's my results on two different machines. The first is a first generation Apple Silicon Mac, (Mac Studio M1 \"Max\", if it matters), and the other on a PC with a Ryzen 7 3700 processor and an Nvidia RTX 3080 video card, so comparable, high-end systems in most respects: Mac Windows Collect Sources 0 ms 1 ms Get Build Sources 1 ms 2 ms Build NavMesh 780 ms 1280 ms Add To NavMesh 1 ms 0 ms So...Good News and Bad News? Those small numbers have some randomness in them because I'm only sampling to the millisecond, but clearly most of these steps aren't going to give us any trouble. The problem, clearly, is that Build NavMesh step. This was for a 700 meter radius on a generated terrain. Not huge, by level standards, but it took more than a second on Windows, and a significant fraction of one on the Mac. And remember that these are high-end systems. The average mid-range gaming machine or MacBook Air is going to do a lot worse. By lowering the radius to 250 meters, I got down to about 100 ms on the Mac, so we have one knob we can play with. But even with that change, there's a very, very obvious stutter when the NavMesh rebuilds. It would be almost impossible to hide. We could lower the radius even more (maybe 50 meters), and build a little bit of the mesh each frame, adding them together over time. But that's a pain to write, and we'd be better off using some asynchronous method (co-routines, jobs, or some other mechanism) to spread the work out more conventionally, instead. So let's look back at that NavMeshBuilder documentation page. There it is! \" BuildNavMeshAsync !\" We're saved. ...except for that \"(UnityEditor)\" at the end of it. It's literally exactly what we want, but we're not allowed to use it at runtime. Aside: OK, what the HECK Unity? In what possible universe does it make sense for the non-time-dependent editor building to be asynchronous, but the runtime version where literally 100% of the users are going to need it to be fast not be? That's not just annoying, it's way past the line into \"actively malicious.\" At this point we should run through our list of obscenities, but once we're done, note that there's one more possibility: UpdateNavMeshDataAsync() . This is similar to BuildNavMeshData , except that it adds or removes data from an existing NavMeshData object (and doesn't take an \"up\" vector, so it can only be used for standard orientations). We can work with that. It's a little weird, but if we just make an empty NavMeshData object and then \"Update\" it with all the data, we'll get the same end result. Something like: // Make a new mesh data object. NavMeshData meshData = new NavMeshData (); // \"Update\" it from scratch. AsyncOperation buildOp = NavMeshBuilder . UpdateNavMeshDataAsync ( meshData , bSettings , buildSources , patchBounds ); Note that UpdateNavMeshDataAsync returns an AsyncOperation , one of the approximately 52,937,419 different asynchronous mechanisms in .NET (the Flaming Eye of Microsoft is also easily distracted, especially with developer frameworks). Off the top of my head, I don't even remember whether this one moves the work off-thread or not; for our purposes, it doesn't really matter.","title":"Wait, why are you still here?"},{"location":"blog/runtime_navmesh/#rebuild-for-asynchronicity","text":"So the trick here is that we're going to need to move this work to a co-routine, and re-arrange things a little bit to make it work. It's not going to be a perfect solution; it's still going to take some time for our new NavMesh to be ready, we're just not going to interrupt the rest of the game while we wait for it. If you're in a scenario where you can keep using the old mesh until the new one is available; you should. If you can't (your \"terrain\" objects are changing position, origin, or whatever), you'll need to be prepared for there to be some time when your NavMeshAgents have no mesh to use, and do something intelligent with that time (move them in a straight line, idle them, have them stand and guard, or taunt, whatever). But in return for that bit of complexity, we should be able to easily do the actual mesh exchange in a millisecond or two, so frame rate shouldn't t be affected at all. Your coroutine may look a little different from mine, depending on where you get some of your parameters from, but I'm going to pass in the center point of the new mesh bounds, a single radius for all axes, and a boolean flag for whether I'm adding to or replacing an existing mesh. Here's the whole thing: /// <summary> /// Coroutine to rebuild the current Scene NavMesh. /// </summary> /// <param name=\"playerPosition\">The center of the mesh search volume</param> /// <param name=\"navigationMeshRadius\">How big a volume should we search for surfaces in.</param> /// <param name=\"rebuildAll\">If \"true\", delete any existing meshes before adding new ones.</param> /// <returns></returns> IEnumerator NavMeshOutOfDateCoroutine ( Vector3 playerPosition , float navigationMeshRadius , bool rebuildAll ) { // Get the list of all \"sources\" around us. This is basically little gridded subsquares // of our terrains. List < NavMeshBuildSource > buildSources = new List < NavMeshBuildSource >(); // Set up a boundary area for the build sources collector to look at; Bounds patchBounds = new Bounds ( playerPosition , new Vector3 ( navigationMeshRadius , navigationMeshRadius , navigationMeshRadius )); // This actually collects the potential surfaces. NavMeshBuilder . CollectSources ( patchBounds , 1 << LayerMask . NameToLayer ( \"Terrain\" ), NavMeshCollectGeometry . PhysicsColliders , 0 , new List < NavMeshBuildMarkup >(), buildSources ); yield return null ; // Build some empty NavMeshData objects int numAgentTypes = NavMesh . GetSettingsCount (); NavMeshData [] meshData = new NavMeshData [ numAgentTypes ]; for ( int agentIndex = 0 ; agentIndex < numAgentTypes ; agentIndex ++) { // Get the settings for each of our agent \"sizes\" (humanoid, giant humanoid) NavMeshBuildSettings bSettings = NavMesh . GetSettingsByIndex ( agentIndex ); // If there are any issues with the agent, print them out as a warning. #if DEBUG foreach ( string s in bSettings . ValidationReport ( patchBounds )) { Debug . LogWarning ( $\"BuildSettings Report: {NavMesh.GetSettingsNameFromID(bSettings.agentTypeID)} : {s}\" ); } #endif // Make empty mesh data object. meshData [ agentIndex ] = new NavMeshData (); AsyncOperation buildOp = NavMeshBuilder . UpdateNavMeshDataAsync ( meshData [ agentIndex ], bSettings , buildSources , patchBounds ); while (! buildOp . isDone ) yield return null ; } if ( rebuildAll ) { NavMesh . RemoveAllNavMeshData (); } for ( int nmd = 0 ; nmd < meshData . Length ; nmd ++) { NavMesh . AddNavMeshData ( meshData [ nmd ]); } yield return null ; } There are a few key lines there, particularly the various yield return null; ones. If you're not familiar with coroutines, that's just code for \"stop here for this frame, go do whatever else you want, and resume here on the next frame.\" In particular, most of the (non) work is done by: while (! buildOp . isDone ) yield return null ; That line is where most of the time in the coroutine is spent. It just checks to see \"is the AsyncOperation done, yet?\" And yields until the next frame if it isn't. Eventually, everything completes and the rest of the code takes only a few milliseconds to actually instantiate the mesh. Also note that we build all the meshes, then remove existing ones (if we're going to), then add the new ones all at once rather than as each one is built. This minimizes the time when no mesh exists at all -- in fact, since there's no yield between the removal and the adds, the new mesh should be available in the very same frame as the old one goes away. (The old NavMesh may or may not still be valid that long, but for most uses it won't matter if it hangs around while we make the new one.)","title":"Rebuild for Asynchronicity"},{"location":"blog/runtime_navmesh/#so-does-it-work","text":"In a nutshell, yes. There's no stutter at all when new NavMeshes are being built or instantiated; I had to put Debug logging in or keep the scene window open even to know when it happened. Was it worth all that effort? Also, yes; being able to build at runtime without destroying the frame rate makes possible scenarios that otherwise wouldn't be, even if the \"wait\" for the NavMesh to become available isn't ideal. For small NavMeshes (a simple dungeon level, basement, maybe even a small village or house), this may very well be usable even several times a second (it can't be every frame because of the yield returns ). And for much larger or more complex meshes, it at least makes building them possible .","title":"So does it work?"}]}